binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO27
      mode:
        input: true
        pulldown: true
    internal: True
    name: "WaterCop Open Light"
    id: open_light
    on_state: 
      then:
        if:
          condition: 
            lambda: |- 
              return x;
          then: 
            lambda: |-
              id(watercop_switch).publish_state(x);
              id(input_switch) = true;
          else:
            lambda: |-
              id(watercop_switch).publish_state(x);
              id(input_switch) = false;
  - platform: gpio
    pin: 
      number: GPIO26
      mode:
        input: true
        pulldown: true
    internal: True
    name: "WaterCop Closed Light"
    id: closed_light
    on_state: 
        if:
          condition: 
            lambda: |- 
              return x;
          then: 
            lambda: |-
              id(watercop_switch).publish_state(x);
              id(input_switch) = false;
          else:
            lambda: |-
              id(watercop_switch).publish_state(x);
              id(input_switch) = true;       


output:
  - platform: gpio
    pin: 
      number: GPIO25
      mode: 
        output: true
    id: open_output

  - platform: gpio
    pin: 
      number: GPIO33
      mode: 
        output: true
    id: close_output

globals:
  - id: input_switch
    type: bool
    restore_value: no
    initial_value: "true"

switch:
  - platform: template
    name: "WaterCop Control"
    id: watercop_switch
    restore_mode: DISABLED
    turn_on_action:
      - if:
          condition:
            lambda: 'return !id(input_switch);'
          then:
            - logger.log: "User requested OPEN"
            - output.turn_on: open_output
            - delay: 1000ms
            - output.turn_off: open_output
          else:
            switch.turn_off: watercop_switch
    turn_off_action:
      - if:
          condition:
            lambda: 'return id(input_switch);'
          then:
            - logger.log: "User requested CLOSE"
            - output.turn_on: close_output
            - delay: 1000ms
            - output.turn_off: close_output
          else:
            switch.turn_on: watercop_switch